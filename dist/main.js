(()=>{"use strict";class t{constructor(t){this.length=t,this.numHits=0,this.origin={x:void 0,y:void 0,align:void 0}}hit(){this.isSunk()||(this.numHits+=1)}isSunk(){return this.numHits>=this.length}}class e{constructor(){this.board=[],this.ships=[];for(let t=0;t<10;t++){this.board[t]=[];for(let e=0;e<10;e++)this.board[t][e]={ship:void 0,tileHit:!1}}}allShipsSunk(){let t=0;return this.ships.forEach((e=>{e.isSunk()&&(t+=1)})),t>=this.ships.length}place(e,r,a,i){const o=new t(a),s=Number(e),n=Number(r),c=Number(a);if(o.origin.x=e,o.origin.y=r,o.origin.align=i,"horizontal"===i){if(n+c-1>9)throw new Error("Ship does not fit horizontally "+n+" "+(n+c-1));for(let t=n;t<n+c;t++)if(this.board[s][t].ship)throw new Error("Ship overlaps with another "+this.board[s][t].ship.origin.x+" "+this.board[s][t].ship.origin.y);for(let t=n;t<n+c;t++)this.board[s][t].ship=o;return this.ships.push(o),"OK"}if("vertical"===i){if(s+c-1>9)throw new Error("Ship does not fit vertically.");for(let t=s;t<s+c;t++)if(this.board[t][n].ship)throw new Error("Ship overlaps with another ");for(let t=s;t<s+c;t++)this.board[t][n].ship=o;return this.ships.push(o),"OK"}}receiveAttack(t,e){const r=Number(t),a=Number(e);if(this.board[r][a].tileHit)throw new Error("Tile was hit already");this.board[r][a].ship?(this.board[r][a].tileHit=!0,this.board[r][a].ship.hit()):this.board[r][a].tileHit=!0}}class r{static id=0;constructor(){r.id+=1,this.playerID=r.id,this.playerGameboard=new e,this.opponent=void 0}attackTile(t,e){const r=Number(t),a=Number(e);try{return this.opponent.playerGameboard.receiveAttack(r,a),"OK"}catch(t){return t}}placeShip(t,e,r,a){const i=Number(t),o=Number(e),s=Number(r);try{this.playerGameboard.place(i,o,s,a)}catch(t){return t}}}const a=document.querySelector("body"),i=document.querySelector("section.game-container .player-board"),o=document.querySelector("section.game-container .cpu-board"),s=document.querySelector("section.game-container .message-box"),n=[{length:2},{length:3},{length:4},{length:4},{length:5}],c=[];let l,d,h="horizontal",u="good";function m(t){s.textContent=t}function f(){for(let t=0;t<10;t++)for(let e=0;e<10;e++){const r=document.createElement("div");r.dataset.x=e,r.dataset.y=t,i.appendChild(r)}}function p(){h="horizontal"===h?"vertical":"horizontal"}function b(t){u="good";const e=t.target;e.classList.contains("miss")&&(u="bad"),e.classList.contains("hit")&&(u="bad"),e.classList.contains("sunk")&&(u="bad"),e.classList.add(`hoverSelect-${u}`)}function g(t){const e=t.target;e.classList.remove("hoverSelect-good"),e.classList.remove("hoverSelect-bad")}function y(t){if("bad"===u)return;const e=t.target,r=function(t){const e=Number(t.x),r=Number(t.y),a=d.playerGameboard.board[e][r].ship;if(!a)return m("MISS"),0;if(d.playerGameboard.receiveAttack(e,r),a.numHits<a.length)return m("HIT!"),1;const i=[],o=Number(a.length);if("horizontal"===a.origin.align)for(let t=0;t<o;t++)i.push({x:a.origin.x,y:Number(a.origin.y)+t});if("vertical"===a.origin.align)for(let t=0;t<o;t++)i.push({x:Number(a.origin.x)+t,y:a.origin.y});return m("SHIP INNSMOUTHED!"),i}({x:e.dataset.x,y:e.dataset.y});0===r?e.classList.add("miss"):1===r?e.classList.add("hit"):(r.forEach((t=>{const e=t.x,r=t.y;o.childNodes.forEach((t=>{Number(t.dataset.x)===e&&Number(t.dataset.y)===r&&t.classList.add("sunk")}))})),S("player")),function(){const t=d.calcAttack(),e=Number(t.x),r=Number(t.y),a=l.playerGameboard.board[e][r].ship;if(a){if(t.hit=!0,a.isSunk()){if(t.sunken=!0,t.tiles=[],"horizontal"===a.origin.align)for(let e=0;e<a.length;e++)t.tiles.push({x:a.origin.x,y:Number(a.origin.y)+e});if("vertical"===a.origin.align)for(let e=0;e<a.length;e++)t.tiles.push({y:a.origin.y,x:Number(a.origin.x)+e})}}else t.hit=!1;!function(t){const e=Number(t.x),r=Number(t.y),a=t.hit?"hit":"miss";if(i.childNodes.forEach((t=>{const i=Number(t.dataset.x);Number(t.dataset.y)===e&&i===r&&t.classList.add(`${a}`)})),t.sunken){const e=t.tiles;i.childNodes.forEach((t=>{e.forEach((e=>{Number(t.dataset.y)===Number(e.x)&&Number(t.dataset.x)===Number(e.y)&&t.classList.add("sunk")}))}))}S("cpu")}(t)}(),u="bad"}function N(t){u="good";const e=t.target;if(0===n.length)return;const r=n[n.length-1].length;if("vertical"===h){const t=Array.from(i.childNodes).filter((t=>!(t.dataset.x!==e.dataset.x||Number(t.dataset.y)<Number(e.dataset.y)||Number(t.dataset.y)>=Number(e.dataset.y)+r)));Number(e.dataset.y)+r>10&&(u="bad"),t.forEach((t=>{t.classList.contains("placed")&&(u="bad")})),t.forEach((t=>{t.classList.add(`hoverSelect-${u}`)}))}if("horizontal"===h){const t=Array.from(i.childNodes).filter((t=>!(t.dataset.y!==e.dataset.y||Number(t.dataset.x)<Number(e.dataset.x)||Number(t.dataset.x)>=Number(e.dataset.x)+r)));Number(e.dataset.x)+r>10&&(u="bad"),t.forEach((t=>{t.classList.contains("placed")&&(u="bad")})),t.forEach((t=>{t.classList.add(`hoverSelect-${u}`)}))}}function v(){i.childNodes.forEach((t=>{t.classList.remove("hoverSelect-good"),t.classList.remove("hoverSelect-bad")}))}function x(t){const e=t.target;if(0===n.length)return;if("bad"===u)return;const r={origin:{x:e.dataset.y,y:e.dataset.x},alignment:h,length:n[n.length-1].length,tiles:[]};c.push(r),i.childNodes.forEach((t=>{t.classList.contains("hoverSelect-good")&&(t.classList.add("placed"),r.tiles.push({x:t.dataset.x,y:t.dataset.y}))})),n.pop(),u="bad",0===n.length&&function(){for(;i.hasChildNodes();)i.removeChild(i.firstChild);f(),i.childNodes.forEach((t=>{c.forEach((e=>{e.tiles.forEach((e=>{t.dataset.x===e.x&&t.dataset.y===e.y&&t.classList.add("placed")}))}))})),function(){const t=document.querySelector(".alignment-btn");t.disabled=!t.disabled}(),c.forEach((t=>{l.playerGameboard.place(t.origin.x,t.origin.y,t.length,t.alignment)})),d.placeShip(5),d.placeShip(4),d.placeShip(4),d.placeShip(3),d.placeShip(2),m("Attack!"),o.childNodes.forEach((t=>{t.addEventListener("mouseover",b),t.addEventListener("mouseout",g),t.addEventListener("click",y)}))}()}function S(t){if("player"===t){if(!d.playerGameboard.allShipsSunk())return 0;m("PLAYER WINS"),E()}else if("cpu"===t){if(!l.playerGameboard.allShipsSunk())return 0;m("CPU WINS"),E()}}function E(){o.childNodes.forEach((t=>{t.removeEventListener("mouseover",b),t.removeEventListener("mouseout",g),t.removeEventListener("click",y),t.classList.remove("hoverSelect-good"),t.classList.remove("hoverSelect-bad")}))}l=new r,d=new class extends r{constructor(){super()}calcAttack(){for(let t=0;t<100;t++)try{const t=Math.floor(10*Math.random()),e=Math.floor(10*Math.random());return this.opponent.playerGameboard.receiveAttack(t,e),{x:t,y:e}}catch(t){}throw new Error("Unable to execute Attack on random Tile after 100 attempts")}placeShip(t){const e=Number(t);for(let t=0;t<100;t++){const t=Math.floor(10*Math.random()),r=Math.floor(10*Math.random()),a=1===Math.floor(3*Math.random()+1)?"horizontal":"vertical";try{if("OK"===this.playerGameboard.place(t,r,e,a))return}catch(t){continue}}}},l.opponent=d,d.opponent=l,f(),function(){for(let t=0;t<10;t++)for(let e=0;e<10;e++){const r=document.createElement("div");r.dataset.x=e,r.dataset.y=t,o.appendChild(r)}}(),m("Place Ships"),i.childNodes.forEach((t=>{t.addEventListener("mouseover",N),t.addEventListener("mouseout",v),t.addEventListener("click",x)})),function(){const t=document.createElement("button");t.textContent="Vertical / Horizontal",t.classList.add("alignment-btn"),t.addEventListener("click",p),a.appendChild(t)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixFQUFJRyxpQkFBaUIsUUFBU3ZDLEdBQzlCbEIsRUFBS2lCLFlBQVlxQyxFQUNuQixDQzdDRWUsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3ZpZXcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBTaGlwIHtcbiAgY29uc3RydWN0b3IobGVuZ3RoKSB7XG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgdGhpcy5udW1IaXRzID0gMDtcbiAgICB0aGlzLm9yaWdpbiA9IHsgeDogdW5kZWZpbmVkLCB5OiB1bmRlZmluZWQsIGFsaWduOiB1bmRlZmluZWQgfTtcbiAgfVxuXG4gIGhpdCgpIHtcbiAgICBpZiAodGhpcy5pc1N1bmsoKSkgcmV0dXJuO1xuICAgIHRoaXMubnVtSGl0cyArPSAxO1xuICB9XG5cbiAgaXNTdW5rKCkge1xuICAgIHJldHVybiB0aGlzLm51bUhpdHMgPj0gdGhpcy5sZW5ndGg7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEdhbWVib2FyZCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYm9hcmQgPSBbXTtcbiAgICB0aGlzLnNoaXBzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICB0aGlzLmJvYXJkW2ldID0gW107XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgdGhpcy5ib2FyZFtpXVtqXSA9IHsgc2hpcDogdW5kZWZpbmVkLCB0aWxlSGl0OiBmYWxzZSB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFsbFNoaXBzU3VuaygpIHtcbiAgICBsZXQgbnVtT2ZTdW5rZW5TaGlwcyA9IDA7XG4gICAgdGhpcy5zaGlwcy5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICBpZiAoc2hpcC5pc1N1bmsoKSkgbnVtT2ZTdW5rZW5TaGlwcyArPSAxO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG51bU9mU3Vua2VuU2hpcHMgPj0gdGhpcy5zaGlwcy5sZW5ndGg7XG4gIH1cblxuICBwbGFjZSh4LCB5LCBsZW5ndGgsIGFsaWduKSB7XG4gICAgY29uc3QgbmV3U2hpcCA9IG5ldyBTaGlwKGxlbmd0aCk7XG4gICAgY29uc3QgeFZhbCA9IE51bWJlcih4KTtcbiAgICBjb25zdCB5VmFsID0gTnVtYmVyKHkpO1xuICAgIGNvbnN0IGxlblZhbCA9IE51bWJlcihsZW5ndGgpO1xuXG4gICAgbmV3U2hpcC5vcmlnaW4ueCA9IHg7XG4gICAgbmV3U2hpcC5vcmlnaW4ueSA9IHk7XG4gICAgbmV3U2hpcC5vcmlnaW4uYWxpZ24gPSBhbGlnbjtcblxuICAgIGlmIChhbGlnbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAvLyBjaGVjayBmaXRcbiAgICAgIGlmICh5VmFsICsgbGVuVmFsIC0gMSA+IDkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnU2hpcCBkb2VzIG5vdCBmaXQgaG9yaXpvbnRhbGx5ICcgKyB5VmFsICsgJyAnICsgKHlWYWwgKyBsZW5WYWwgLSAxKVxuICAgICAgICApO1xuICAgICAgLy8gY2hlY2sgb3ZlcmxhcFxuICAgICAgZm9yIChsZXQgaSA9IHlWYWw7IGkgPCB5VmFsICsgbGVuVmFsOyBpKyspXG4gICAgICAgIGlmICh0aGlzLmJvYXJkW3hWYWxdW2ldLnNoaXApXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1NoaXAgb3ZlcmxhcHMgd2l0aCBhbm90aGVyICcgK1xuICAgICAgICAgICAgICB0aGlzLmJvYXJkW3hWYWxdW2ldLnNoaXAub3JpZ2luLnggK1xuICAgICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgICB0aGlzLmJvYXJkW3hWYWxdW2ldLnNoaXAub3JpZ2luLnlcbiAgICAgICAgICApO1xuXG4gICAgICAvLyB2YWxpZFxuICAgICAgZm9yIChsZXQgaSA9IHlWYWw7IGkgPCB5VmFsICsgbGVuVmFsOyBpKyspXG4gICAgICAgIHRoaXMuYm9hcmRbeFZhbF1baV0uc2hpcCA9IG5ld1NoaXA7XG4gICAgICB0aGlzLnNoaXBzLnB1c2gobmV3U2hpcCk7XG4gICAgICByZXR1cm4gJ09LJztcbiAgICB9XG5cbiAgICBpZiAoYWxpZ24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgIC8vIGNoZWNrIGZpdFxuICAgICAgaWYgKHhWYWwgKyBsZW5WYWwgLSAxID4gOSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGlwIGRvZXMgbm90IGZpdCB2ZXJ0aWNhbGx5LicpO1xuICAgICAgLy8gY2hlY2sgb3ZlcmxhcFxuICAgICAgZm9yIChsZXQgaSA9IHhWYWw7IGkgPCB4VmFsICsgbGVuVmFsOyBpKyspXG4gICAgICAgIGlmICh0aGlzLmJvYXJkW2ldW3lWYWxdLnNoaXApXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGlwIG92ZXJsYXBzIHdpdGggYW5vdGhlciAnKTtcblxuICAgICAgLy8gdmFsaWRcbiAgICAgIGZvciAobGV0IGkgPSB4VmFsOyBpIDwgeFZhbCArIGxlblZhbDsgaSsrKVxuICAgICAgICB0aGlzLmJvYXJkW2ldW3lWYWxdLnNoaXAgPSBuZXdTaGlwO1xuICAgICAgdGhpcy5zaGlwcy5wdXNoKG5ld1NoaXApO1xuICAgICAgcmV0dXJuICdPSyc7XG4gICAgfVxuICB9XG5cbiAgcmVjZWl2ZUF0dGFjayh4LCB5KSB7XG4gICAgY29uc3QgeFZhbCA9IE51bWJlcih4KTtcbiAgICBjb25zdCB5VmFsID0gTnVtYmVyKHkpO1xuXG4gICAgaWYgKHRoaXMuYm9hcmRbeFZhbF1beVZhbF0udGlsZUhpdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaWxlIHdhcyBoaXQgYWxyZWFkeScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmJvYXJkW3hWYWxdW3lWYWxdLnNoaXApIHtcbiAgICAgIHRoaXMuYm9hcmRbeFZhbF1beVZhbF0udGlsZUhpdCA9IHRydWU7XG4gICAgICB0aGlzLmJvYXJkW3hWYWxdW3lWYWxdLnNoaXAuaGl0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYm9hcmRbeFZhbF1beVZhbF0udGlsZUhpdCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXIge1xuICBzdGF0aWMgaWQgPSAwO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBQbGF5ZXIuaWQgKz0gMTtcbiAgICB0aGlzLnBsYXllcklEID0gUGxheWVyLmlkO1xuICAgIHRoaXMucGxheWVyR2FtZWJvYXJkID0gbmV3IEdhbWVib2FyZCgpO1xuICAgIHRoaXMub3Bwb25lbnQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBhdHRhY2tUaWxlKHgsIHkpIHtcbiAgICBjb25zdCB4VmFsID0gTnVtYmVyKHgpO1xuICAgIGNvbnN0IHlWYWwgPSBOdW1iZXIoeSk7XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5vcHBvbmVudC5wbGF5ZXJHYW1lYm9hcmQucmVjZWl2ZUF0dGFjayh4VmFsLCB5VmFsKTtcbiAgICAgIHJldHVybiAnT0snO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG4gIH1cblxuICBwbGFjZVNoaXAoeCwgeSwgbGVuZ3RoLCBhbGlnbm1lbnQpIHtcbiAgICBjb25zdCB4VmFsID0gTnVtYmVyKHgpO1xuICAgIGNvbnN0IHlWYWwgPSBOdW1iZXIoeSk7XG4gICAgY29uc3QgbGVuVmFsID0gTnVtYmVyKGxlbmd0aCk7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucGxheWVyR2FtZWJvYXJkLnBsYWNlKHhWYWwsIHlWYWwsIGxlblZhbCwgYWxpZ25tZW50KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDUFUgZXh0ZW5kcyBQbGF5ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgY2FsY0F0dGFjaygpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByYW5kWCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgICAgY29uc3QgcmFuZFkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG5cbiAgICAgICAgdGhpcy5vcHBvbmVudC5wbGF5ZXJHYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhyYW5kWCwgcmFuZFkpO1xuICAgICAgICBjb25zdCBjb29yZE9iaiA9IHsgeDogcmFuZFgsIHk6IHJhbmRZIH07XG4gICAgICAgIHJldHVybiBjb29yZE9iajtcbiAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ1VuYWJsZSB0byBleGVjdXRlIEF0dGFjayBvbiByYW5kb20gVGlsZSBhZnRlciAxMDAgYXR0ZW1wdHMnXG4gICAgKTtcbiAgfVxuXG4gIHBsYWNlU2hpcChsZW5ndGgpIHtcbiAgICBjb25zdCBsZW5WYWwgPSBOdW1iZXIobGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XG4gICAgICBjb25zdCByYW5kWCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgIGNvbnN0IHJhbmRZID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgY29uc3QgYWxpZ24gPVxuICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzICsgMSkgPT09IDEgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy5wbGF5ZXJHYW1lYm9hcmQucGxhY2UocmFuZFgsIHJhbmRZLCBsZW5WYWwsIGFsaWduKSA9PT0gJ09LJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2tHYW1lT3ZlciwgY2hlY2tIaXQsIGNwdUF0dGFjaywgaW5pdEdhbWUgfSBmcm9tICcuL2NvbnRyb2xsZXInO1xuXG5jb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuXG5jb25zdCBwbGF5ZXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAnc2VjdGlvbi5nYW1lLWNvbnRhaW5lciAucGxheWVyLWJvYXJkJ1xuKTtcbmNvbnN0IGNwdUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICdzZWN0aW9uLmdhbWUtY29udGFpbmVyIC5jcHUtYm9hcmQnXG4pO1xuY29uc3QgbWVzc2FnZUJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgJ3NlY3Rpb24uZ2FtZS1jb250YWluZXIgLm1lc3NhZ2UtYm94J1xuKTtcblxuY29uc3Qgc2hpcHNUb1BsYWNlID0gW1xuICB7IGxlbmd0aDogMiB9LFxuICB7IGxlbmd0aDogMyB9LFxuICB7IGxlbmd0aDogNCB9LFxuICB7IGxlbmd0aDogNCB9LFxuICB7IGxlbmd0aDogNSB9LFxuXTtcblxuY29uc3QgcGxhY2VkU2hpcHMgPSBbXTtcbmxldCBhbGlnbiA9ICdob3Jpem9udGFsJztcbmxldCBzdGF0dXMgPSAnZ29vZCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5TWVzc2FnZShtZXNzYWdlKSB7XG4gIG1lc3NhZ2VCb2FyZC50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG59XG5cbi8vIEV2ZW50TGlzdGVuZXJzXG5leHBvcnQgZnVuY3Rpb24gaW5pdFBsYWNlbWVudEV2ZW50cygpIHtcbiAgcGxheWVyQ29udGFpbmVyLmNoaWxkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgc2hvd1BsYWNlbWVudFByZXZpZXcpO1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBjbGVhclByZXZpZXcpO1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwbGFjZVRpbGVzKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0QXR0YWNrRXZlbnRzKCkge1xuICBjcHVDb250YWluZXIuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBzaG93QXR0YWNrUHJldmlldyk7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGNsZWFyQXR0YWNrUHJldmlldyk7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV4ZWN1dGVBdHRhY2spO1xuICB9KTtcbn1cblxuLy8gRE9NIElOSVRcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQbGF5ZXJHcmlkKCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgIGNvbnN0IHRpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRpbGUuZGF0YXNldC54ID0gajtcbiAgICAgIHRpbGUuZGF0YXNldC55ID0gaTtcbiAgICAgIHBsYXllckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aWxlKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDUFVHcmlkKCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgIGNvbnN0IHRpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRpbGUuZGF0YXNldC54ID0gajtcbiAgICAgIHRpbGUuZGF0YXNldC55ID0gaTtcbiAgICAgIGNwdUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aWxlKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gQWxpZ25tZW50IEJ1dHRvblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dBbGlnbkJ0bigpIHtcbiAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGJ0bi50ZXh0Q29udGVudCA9ICdWZXJ0aWNhbCAvIEhvcml6b250YWwnO1xuICBidG4uY2xhc3NMaXN0LmFkZCgnYWxpZ25tZW50LWJ0bicpO1xuICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVBbGlnbm1lbnQpO1xuICBib2R5LmFwcGVuZENoaWxkKGJ0bik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVBbGlnbkJ0bigpIHtcbiAgY29uc3QgYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFsaWdubWVudC1idG4nKTtcbiAgYnRuLmRpc2FibGVkID0gYnRuLmRpc2FibGVkID8gZmFsc2UgOiB0cnVlO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVBbGlnbm1lbnQoKSB7XG4gIGFsaWduID0gYWxpZ24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG59XG5cbi8vIEF0dGFjayByZWxhdGVkXG5mdW5jdGlvbiBzaG93QXR0YWNrUHJldmlldyhldmVudCkge1xuICBzdGF0dXMgPSAnZ29vZCc7XG4gIGNvbnN0IHRpbGUgPSBldmVudC50YXJnZXQ7XG5cbiAgaWYgKHRpbGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdtaXNzJykpIHN0YXR1cyA9ICdiYWQnO1xuICBpZiAodGlsZS5jbGFzc0xpc3QuY29udGFpbnMoJ2hpdCcpKSBzdGF0dXMgPSAnYmFkJztcbiAgaWYgKHRpbGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdzdW5rJykpIHN0YXR1cyA9ICdiYWQnO1xuXG4gIHRpbGUuY2xhc3NMaXN0LmFkZChgaG92ZXJTZWxlY3QtJHtzdGF0dXN9YCk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyQXR0YWNrUHJldmlldyhldmVudCkge1xuICBjb25zdCB0aWxlID0gZXZlbnQudGFyZ2V0O1xuICB0aWxlLmNsYXNzTGlzdC5yZW1vdmUoJ2hvdmVyU2VsZWN0LWdvb2QnKTtcbiAgdGlsZS5jbGFzc0xpc3QucmVtb3ZlKCdob3ZlclNlbGVjdC1iYWQnKTtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZUF0dGFjayhldmVudCkge1xuICBpZiAoc3RhdHVzID09PSAnYmFkJykgcmV0dXJuO1xuXG4gIGNvbnN0IHRpbGUgPSBldmVudC50YXJnZXQ7XG4gIGNvbnN0IHRpbGVJbmZvID0geyB4OiB0aWxlLmRhdGFzZXQueCwgeTogdGlsZS5kYXRhc2V0LnkgfTtcbiAgY29uc3QgaGl0ID0gY2hlY2tIaXQodGlsZUluZm8pO1xuXG4gIGlmIChoaXQgPT09IDApIHtcbiAgICB0aWxlLmNsYXNzTGlzdC5hZGQoJ21pc3MnKTtcbiAgfSBlbHNlIGlmIChoaXQgPT09IDEpIHtcbiAgICB0aWxlLmNsYXNzTGlzdC5hZGQoJ2hpdCcpO1xuICB9IGVsc2Uge1xuICAgIC8vIHNoaXAgaXMgc3VuayBzbyB3ZSBnZXQgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBzaGlwVGlsZXNcbiAgICBoaXQuZm9yRWFjaCgoc2hpcFRpbGUpID0+IHtcbiAgICAgIGNvbnN0IHhWYWwgPSBzaGlwVGlsZS54O1xuICAgICAgY29uc3QgeVZhbCA9IHNoaXBUaWxlLnk7XG5cbiAgICAgIGNwdUNvbnRhaW5lci5jaGlsZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIE51bWJlcihub2RlLmRhdGFzZXQueCkgPT09IHhWYWwgJiZcbiAgICAgICAgICBOdW1iZXIobm9kZS5kYXRhc2V0LnkpID09PSB5VmFsXG4gICAgICAgICkge1xuICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZCgnc3VuaycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBjaGVja0dhbWVPdmVyKCdwbGF5ZXInKTtcbiAgfVxuICBjcHVBdHRhY2soKTtcbiAgc3RhdHVzID0gJ2JhZCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDUFVBdHRhY2soYXR0YWNrRGF0YSkge1xuICBjb25zdCB4VmFsID0gTnVtYmVyKGF0dGFja0RhdGEueCk7XG4gIGNvbnN0IHlWYWwgPSBOdW1iZXIoYXR0YWNrRGF0YS55KTtcbiAgY29uc3QgaGl0ID0gYXR0YWNrRGF0YS5oaXQ7XG5cbiAgY29uc3Qgc3RhdHVzID0gaGl0ID8gJ2hpdCcgOiAnbWlzcyc7XG5cbiAgLy8gYXBwbHkgY2xhc3NcbiAgcGxheWVyQ29udGFpbmVyLmNoaWxkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgIGNvbnN0IG5vZGVZID0gTnVtYmVyKG5vZGUuZGF0YXNldC54KTtcbiAgICBjb25zdCBub2RlWCA9IE51bWJlcihub2RlLmRhdGFzZXQueSk7XG5cbiAgICBpZiAobm9kZVggPT09IHhWYWwgJiYgbm9kZVkgPT09IHlWYWwpIHtcbiAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZChgJHtzdGF0dXN9YCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBjaGVjayBpZiBzaGlwIHN1bmtcbiAgaWYgKGF0dGFja0RhdGEuc3Vua2VuKSB7XG4gICAgY29uc3QgdGlsZXMgPSBhdHRhY2tEYXRhLnRpbGVzO1xuICAgIHBsYXllckNvbnRhaW5lci5jaGlsZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgIHRpbGVzLmZvckVhY2goKHRpbGUpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIE51bWJlcihub2RlLmRhdGFzZXQueSkgPT09IE51bWJlcih0aWxlLngpICYmXG4gICAgICAgICAgTnVtYmVyKG5vZGUuZGF0YXNldC54KSA9PT0gTnVtYmVyKHRpbGUueSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKCdzdW5rJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgY2hlY2tHYW1lT3ZlcignY3B1Jyk7XG59XG5cbi8vIHBsYWNlbWVudCBob3ZlciBwcmV2aWV3XG5mdW5jdGlvbiBzaG93UGxhY2VtZW50UHJldmlldyhldmVudCkge1xuICBzdGF0dXMgPSAnZ29vZCc7XG4gIGNvbnN0IHRpbGUgPSBldmVudC50YXJnZXQ7XG5cbiAgaWYgKHNoaXBzVG9QbGFjZS5sZW5ndGggPT09IDApIHJldHVybjtcblxuICBjb25zdCBsZW5ndGggPSBzaGlwc1RvUGxhY2Vbc2hpcHNUb1BsYWNlLmxlbmd0aCAtIDFdLmxlbmd0aDtcblxuICBpZiAoYWxpZ24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICBjb25zdCBzZWxlY3RlZCA9IEFycmF5LmZyb20ocGxheWVyQ29udGFpbmVyLmNoaWxkTm9kZXMpLmZpbHRlcigobm9kZSkgPT4ge1xuICAgICAgaWYgKG5vZGUuZGF0YXNldC54ICE9PSB0aWxlLmRhdGFzZXQueCkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKE51bWJlcihub2RlLmRhdGFzZXQueSkgPCBOdW1iZXIodGlsZS5kYXRhc2V0LnkpKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoTnVtYmVyKG5vZGUuZGF0YXNldC55KSA+PSBOdW1iZXIodGlsZS5kYXRhc2V0LnkpICsgbGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGlmIChOdW1iZXIodGlsZS5kYXRhc2V0LnkpICsgbGVuZ3RoID4gMTApIHN0YXR1cyA9ICdiYWQnO1xuICAgIHNlbGVjdGVkLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgIGlmIChub2RlLmNsYXNzTGlzdC5jb250YWlucygncGxhY2VkJykpIHN0YXR1cyA9ICdiYWQnO1xuICAgIH0pO1xuXG4gICAgc2VsZWN0ZWQuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKGBob3ZlclNlbGVjdC0ke3N0YXR1c31gKTtcbiAgICB9KTtcbiAgfVxuICBpZiAoYWxpZ24gPT09ICdob3Jpem9udGFsJykge1xuICAgIGNvbnN0IHNlbGVjdGVkID0gQXJyYXkuZnJvbShwbGF5ZXJDb250YWluZXIuY2hpbGROb2RlcykuZmlsdGVyKChub2RlKSA9PiB7XG4gICAgICBpZiAobm9kZS5kYXRhc2V0LnkgIT09IHRpbGUuZGF0YXNldC55KSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoTnVtYmVyKG5vZGUuZGF0YXNldC54KSA8IE51bWJlcih0aWxlLmRhdGFzZXQueCkpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChOdW1iZXIobm9kZS5kYXRhc2V0LngpID49IE51bWJlcih0aWxlLmRhdGFzZXQueCkgKyBsZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuXG4gICAgaWYgKE51bWJlcih0aWxlLmRhdGFzZXQueCkgKyBsZW5ndGggPiAxMCkgc3RhdHVzID0gJ2JhZCc7XG4gICAgc2VsZWN0ZWQuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgaWYgKG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdwbGFjZWQnKSkgc3RhdHVzID0gJ2JhZCc7XG4gICAgfSk7XG5cbiAgICBzZWxlY3RlZC5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICBub2RlLmNsYXNzTGlzdC5hZGQoYGhvdmVyU2VsZWN0LSR7c3RhdHVzfWApO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFyUHJldmlldygpIHtcbiAgcGxheWVyQ29udGFpbmVyLmNoaWxkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXJTZWxlY3QtZ29vZCcpO1xuICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXJTZWxlY3QtYmFkJyk7XG4gIH0pO1xufVxuXG4vLyBUaWxlIHBsYWNlbWVudCBsb2dpY1xuZnVuY3Rpb24gcGxhY2VUaWxlcyhldmVudCkge1xuICBjb25zdCB0aWxlID0gZXZlbnQudGFyZ2V0O1xuXG4gIC8vIGlmIGFsbCBzaGlwcyBwbGFjZWQgZXhpdFxuICBpZiAoc2hpcHNUb1BsYWNlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIG5vIHZhbGlkIGxvY2F0aW9uIGZvciBwbGFjZW1lbnQsIGV4aXQgZnVuY3Rpb25cbiAgaWYgKHN0YXR1cyA9PT0gJ2JhZCcpIHJldHVybjtcblxuICBjb25zdCBzaGlwID0ge1xuICAgIG9yaWdpbjogeyB4OiB0aWxlLmRhdGFzZXQueSwgeTogdGlsZS5kYXRhc2V0LnggfSxcbiAgICBhbGlnbm1lbnQ6IGFsaWduLFxuICAgIGxlbmd0aDogc2hpcHNUb1BsYWNlW3NoaXBzVG9QbGFjZS5sZW5ndGggLSAxXS5sZW5ndGgsXG4gICAgdGlsZXM6IFtdLFxuICB9O1xuXG4gIHBsYWNlZFNoaXBzLnB1c2goc2hpcCk7XG5cbiAgLy8gcGxhY2VtZW50IGxvY2F0aW9uIHZhbGlkLCBtYXJrIGFuZCBzYXZlIHRpbGVzc1xuICBwbGF5ZXJDb250YWluZXIuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgaWYgKG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdob3ZlclNlbGVjdC1nb29kJykpIHtcbiAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZCgncGxhY2VkJyk7XG4gICAgICBzaGlwLnRpbGVzLnB1c2goeyB4OiBub2RlLmRhdGFzZXQueCwgeTogbm9kZS5kYXRhc2V0LnkgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBzaGlwIGhhcyBiZWVuIHBsYWNlZFxuICBzaGlwc1RvUGxhY2UucG9wKCk7XG5cbiAgc3RhdHVzID0gJ2JhZCc7XG5cbiAgaWYgKHNoaXBzVG9QbGFjZS5sZW5ndGggPT09IDApIHNldFN0YWdlKCk7XG59XG5cbi8vIGlmIGFsbCBzaGlwcyBoYXMgYmVlbiBwbGFjZWQgcmVidWlsZCBVSSB3aXRoIG1hcmtpbmdzXG4vLyBzZXR1cCBvZiBwbGF5ZXJGaWVsZCBlbmRzIGFuZCBubyBuZXcgc2hpcHMgd2lsbCBiZSBwbGFjZWRcbi8vIGluaXRpYXRlIG5leHQgcGhhc2Ugb2YgZ2FtZVxuZnVuY3Rpb24gc2V0U3RhZ2UoKSB7XG4gIC8vIHJlbW92ZSBhbGwgRE9NIGVsZW1lbnRzIHRvIGdldCByaWQgb2YgZXZlbnQgbGlzdGVuZXJzXG4gIHdoaWxlIChwbGF5ZXJDb250YWluZXIuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgcGxheWVyQ29udGFpbmVyLnJlbW92ZUNoaWxkKHBsYXllckNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgfVxuXG4gIC8vIHJlY3JlYXRlIEdyaWRcbiAgY3JlYXRlUGxheWVyR3JpZCgpO1xuXG4gIC8vIHBsYWNlIHZpc3VhbCBtYXJrc1xuICBwbGF5ZXJDb250YWluZXIuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgcGxhY2VkU2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgc2hpcC50aWxlcy5mb3JFYWNoKCh0aWxlKSA9PiB7XG4gICAgICAgIGlmIChub2RlLmRhdGFzZXQueCA9PT0gdGlsZS54ICYmIG5vZGUuZGF0YXNldC55ID09PSB0aWxlLnkpXG4gICAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKCdwbGFjZWQnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBkaXNhYmxlIGJ1dHRvblxuICB0b2dnbGVBbGlnbkJ0bigpO1xuXG4gIC8vIG5vdyBzdGFnZSBpcyBzZXQuIEdhbWUgY2FuIHN0YXJ0XG4gIGluaXRHYW1lKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGFjZWRTaGlwcygpIHtcbiAgcmV0dXJuIHBsYWNlZFNoaXBzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZUdhbWVWaWV3KCkge1xuICBjcHVDb250YWluZXIuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBzaG93QXR0YWNrUHJldmlldyk7XG4gICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIGNsZWFyQXR0YWNrUHJldmlldyk7XG4gICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGV4ZWN1dGVBdHRhY2spO1xuXG4gICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdob3ZlclNlbGVjdC1nb29kJyk7XG4gICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdob3ZlclNlbGVjdC1iYWQnKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgeyBDUFUsIFBsYXllciB9IGZyb20gJy4vZmFjdG9yeSc7XG5pbXBvcnQge1xuICBjcmVhdGVDUFVHcmlkLFxuICBjcmVhdGVQbGF5ZXJHcmlkLFxuICBkaXNhYmxlR2FtZVZpZXcsXG4gIGRpc3BsYXlNZXNzYWdlLFxuICBnZXRQbGFjZWRTaGlwcyxcbiAgaW5pdEF0dGFja0V2ZW50cyxcbiAgaW5pdFBsYWNlbWVudEV2ZW50cyxcbiAgc2hvd0FsaWduQnRuLFxuICB1cGRhdGVDUFVBdHRhY2ssXG59IGZyb20gJy4vdmlldyc7XG5cbmxldCBwbGF5ZXI7XG5sZXQgY3B1O1xuXG5leHBvcnQgZnVuY3Rpb24gbGF1bmNoR2FtZSgpIHtcbiAgcGxheWVyID0gbmV3IFBsYXllcigpO1xuICBjcHUgPSBuZXcgQ1BVKCk7XG5cbiAgcGxheWVyLm9wcG9uZW50ID0gY3B1O1xuICBjcHUub3Bwb25lbnQgPSBwbGF5ZXI7XG5cbiAgLy8gYnVpbGQgZ3JpZHNcbiAgY3JlYXRlUGxheWVyR3JpZCgpO1xuICBjcmVhdGVDUFVHcmlkKCk7XG5cbiAgZGlzcGxheU1lc3NhZ2UoJ1BsYWNlIFNoaXBzJyk7XG5cbiAgLy8gcGxheWVyIHNoaXBzIHBsYWNlbWVudCBwaGFzZVxuICBpbml0UGxhY2VtZW50RXZlbnRzKCk7XG4gIHNob3dBbGlnbkJ0bigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEdhbWUoKSB7XG4gIGNvbnN0IGdldFNoaXBzID0gZ2V0UGxhY2VkU2hpcHMoKTtcbiAgZ2V0U2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgIHBsYXllci5wbGF5ZXJHYW1lYm9hcmQucGxhY2UoXG4gICAgICBzaGlwLm9yaWdpbi54LFxuICAgICAgc2hpcC5vcmlnaW4ueSxcbiAgICAgIHNoaXAubGVuZ3RoLFxuICAgICAgc2hpcC5hbGlnbm1lbnRcbiAgICApO1xuICB9KTtcblxuICBjcHUucGxhY2VTaGlwKDUpO1xuICBjcHUucGxhY2VTaGlwKDQpO1xuICBjcHUucGxhY2VTaGlwKDQpO1xuICBjcHUucGxhY2VTaGlwKDMpO1xuICBjcHUucGxhY2VTaGlwKDIpO1xuXG4gIHN0YXJ0R2FtZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tIaXQob2JqKSB7XG4gIGNvbnN0IHhWYWwgPSBOdW1iZXIob2JqLngpO1xuICBjb25zdCB5VmFsID0gTnVtYmVyKG9iai55KTtcblxuICBjb25zdCBzaGlwID0gY3B1LnBsYXllckdhbWVib2FyZC5ib2FyZFt4VmFsXVt5VmFsXS5zaGlwO1xuXG4gIGlmICghc2hpcCkge1xuICAgIGRpc3BsYXlNZXNzYWdlKCdNSVNTJyk7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvLyBub3QgYSBtaXNzIHNvIGF0dGFjayBoaXRzIVxuICBjcHUucGxheWVyR2FtZWJvYXJkLnJlY2VpdmVBdHRhY2soeFZhbCwgeVZhbCk7XG5cbiAgLy8gY2hlY2sgaWYgc2hpcCBpcyBoaXQgYnV0IG5vdCBzdW5rZW5cbiAgaWYgKHNoaXAubnVtSGl0cyA8IHNoaXAubGVuZ3RoKSB7XG4gICAgZGlzcGxheU1lc3NhZ2UoJ0hJVCEnKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIC8vIHNoaXAgaXMgc3Vua2VuIHJldHVybiBvYmogd2l0aCBhbGwgdGlsZURhdGEgb2Ygc2hpcFxuICBjb25zdCB0aWxlcyA9IFtdO1xuICBjb25zdCBsZW4gPSBOdW1iZXIoc2hpcC5sZW5ndGgpO1xuXG4gIGlmIChzaGlwLm9yaWdpbi5hbGlnbiA9PT0gJ2hvcml6b250YWwnKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICB0aWxlcy5wdXNoKHsgeDogc2hpcC5vcmlnaW4ueCwgeTogTnVtYmVyKHNoaXAub3JpZ2luLnkpICsgaSB9KTtcbiAgaWYgKHNoaXAub3JpZ2luLmFsaWduID09PSAndmVydGljYWwnKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICB0aWxlcy5wdXNoKHsgeDogTnVtYmVyKHNoaXAub3JpZ2luLngpICsgaSwgeTogc2hpcC5vcmlnaW4ueSB9KTtcblxuICBkaXNwbGF5TWVzc2FnZSgnU0hJUCBJTk5TTU9VVEhFRCEnKTtcblxuICByZXR1cm4gdGlsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0dhbWVPdmVyKHdpbm5lcikge1xuICBpZiAod2lubmVyID09PSAncGxheWVyJykge1xuICAgIC8vIGNoZWNrXG4gICAgaWYgKCFjcHUucGxheWVyR2FtZWJvYXJkLmFsbFNoaXBzU3VuaygpKSByZXR1cm4gMDtcbiAgICAvLyBlbmQgZ2FtZSB3aW5uZXIgcGxheWVyXG4gICAgZGlzcGxheU1lc3NhZ2UoJ1BMQVlFUiBXSU5TJyk7XG4gICAgZW5kR2FtZSgpO1xuICB9IGVsc2UgaWYgKHdpbm5lciA9PT0gJ2NwdScpIHtcbiAgICAvLyBjaGVja1xuICAgIGlmICghcGxheWVyLnBsYXllckdhbWVib2FyZC5hbGxTaGlwc1N1bmsoKSkgcmV0dXJuIDA7XG4gICAgLy8gZW5kIGdhbWUgd2lubmVyIGNwdVxuICAgIGRpc3BsYXlNZXNzYWdlKCdDUFUgV0lOUycpO1xuICAgIGVuZEdhbWUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydEdhbWUoKSB7XG4gIGRpc3BsYXlNZXNzYWdlKCdBdHRhY2shJyk7XG4gIGluaXRBdHRhY2tFdmVudHMoKTtcbn1cblxuZnVuY3Rpb24gZW5kR2FtZSgpIHtcbiAgZGlzYWJsZUdhbWVWaWV3KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcHVBdHRhY2soKSB7XG4gIGNvbnN0IGF0dGFja0RhdGEgPSBjcHUuY2FsY0F0dGFjaygpO1xuICBjb25zdCB4VmFsID0gTnVtYmVyKGF0dGFja0RhdGEueCk7XG4gIGNvbnN0IHlWYWwgPSBOdW1iZXIoYXR0YWNrRGF0YS55KTtcbiAgY29uc3Qgc2hpcCA9IHBsYXllci5wbGF5ZXJHYW1lYm9hcmQuYm9hcmRbeFZhbF1beVZhbF0uc2hpcDtcblxuICBpZiAoIXNoaXApIGF0dGFja0RhdGEuaGl0ID0gZmFsc2U7XG4gIGVsc2Uge1xuICAgIGF0dGFja0RhdGEuaGl0ID0gdHJ1ZTtcbiAgICAvLyBjaGVjayBpZiBzdW5rZW5cbiAgICBpZiAoc2hpcC5pc1N1bmsoKSkge1xuICAgICAgYXR0YWNrRGF0YS5zdW5rZW4gPSB0cnVlO1xuICAgICAgYXR0YWNrRGF0YS50aWxlcyA9IFtdO1xuICAgICAgaWYgKHNoaXAub3JpZ2luLmFsaWduID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKVxuICAgICAgICAgIGF0dGFja0RhdGEudGlsZXMucHVzaCh7XG4gICAgICAgICAgICB4OiBzaGlwLm9yaWdpbi54LFxuICAgICAgICAgICAgeTogTnVtYmVyKHNoaXAub3JpZ2luLnkpICsgaSxcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzaGlwLm9yaWdpbi5hbGlnbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspXG4gICAgICAgICAgYXR0YWNrRGF0YS50aWxlcy5wdXNoKHtcbiAgICAgICAgICAgIHk6IHNoaXAub3JpZ2luLnksXG4gICAgICAgICAgICB4OiBOdW1iZXIoc2hpcC5vcmlnaW4ueCkgKyBpLFxuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB1cGRhdGVDUFVBdHRhY2soYXR0YWNrRGF0YSk7XG59XG4iXSwibmFtZXMiOlsiU2hpcCIsImNvbnN0cnVjdG9yIiwibGVuZ3RoIiwidGhpcyIsIm51bUhpdHMiLCJvcmlnaW4iLCJ4IiwidW5kZWZpbmVkIiwieSIsImFsaWduIiwiaGl0IiwiaXNTdW5rIiwiR2FtZWJvYXJkIiwiYm9hcmQiLCJzaGlwcyIsImkiLCJqIiwic2hpcCIsInRpbGVIaXQiLCJhbGxTaGlwc1N1bmsiLCJudW1PZlN1bmtlblNoaXBzIiwiZm9yRWFjaCIsInBsYWNlIiwibmV3U2hpcCIsInhWYWwiLCJOdW1iZXIiLCJ5VmFsIiwibGVuVmFsIiwiRXJyb3IiLCJwdXNoIiwicmVjZWl2ZUF0dGFjayIsIlBsYXllciIsInN0YXRpYyIsImlkIiwicGxheWVySUQiLCJwbGF5ZXJHYW1lYm9hcmQiLCJvcHBvbmVudCIsImF0dGFja1RpbGUiLCJlcnIiLCJwbGFjZVNoaXAiLCJhbGlnbm1lbnQiLCJib2R5IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicGxheWVyQ29udGFpbmVyIiwiY3B1Q29udGFpbmVyIiwibWVzc2FnZUJvYXJkIiwic2hpcHNUb1BsYWNlIiwicGxhY2VkU2hpcHMiLCJwbGF5ZXIiLCJjcHUiLCJkaXNwbGF5TWVzc2FnZSIsIm1lc3NhZ2UiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZVBsYXllckdyaWQiLCJ0aWxlIiwiY3JlYXRlRWxlbWVudCIsImRhdGFzZXQiLCJhcHBlbmRDaGlsZCIsInRvZ2dsZUFsaWdubWVudCIsInNob3dBdHRhY2tQcmV2aWV3IiwiZXZlbnQiLCJ0YXJnZXQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImFkZCIsImNsZWFyQXR0YWNrUHJldmlldyIsInJlbW92ZSIsImV4ZWN1dGVBdHRhY2siLCJvYmoiLCJ0aWxlcyIsImxlbiIsImNoZWNrSGl0Iiwic2hpcFRpbGUiLCJjaGlsZE5vZGVzIiwibm9kZSIsImNoZWNrR2FtZU92ZXIiLCJhdHRhY2tEYXRhIiwiY2FsY0F0dGFjayIsInN1bmtlbiIsInN0YXR1cyIsIm5vZGVZIiwidXBkYXRlQ1BVQXR0YWNrIiwiY3B1QXR0YWNrIiwic2hvd1BsYWNlbWVudFByZXZpZXciLCJzZWxlY3RlZCIsIkFycmF5IiwiZnJvbSIsImZpbHRlciIsImNsZWFyUHJldmlldyIsInBsYWNlVGlsZXMiLCJwb3AiLCJoYXNDaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJmaXJzdENoaWxkIiwiYnRuIiwiZGlzYWJsZWQiLCJ0b2dnbGVBbGlnbkJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRTdGFnZSIsIndpbm5lciIsImVuZEdhbWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3VwZXIiLCJyYW5kWCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJhbmRZIiwiY3JlYXRlQ1BVR3JpZCIsInNob3dBbGlnbkJ0biJdLCJzb3VyY2VSb290IjoiIn0=